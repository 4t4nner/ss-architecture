{"version":3,"sources":["labs/lab1/index.module.css","components/MainPage/index.module.css","labs/lab1/fabrics.ts","labs/lab1/index.tsx","labs/lab2/index.tsx","components/MainPage/index.tsx","components/MainMenu/ThemedMenu.tsx","components/Header.tsx","components/Layout.tsx","App.tsx","index.tsx"],"names":["module","exports","colors","self","bg","BlackBg","WhiteBg","Caption","selfColor","bgColor","this","BlackCaption","WhiteCaption","Monkey","caption","getBackground","getCaption","WhiteMonkey","BlackMonkey","Lab1","useState","fabricType","setFabricType","className","styles","main","buttonContainer","Button","onClick","drawMonkey","isWhiteColor","monkey","background","color","getColor","getMonkey","style","drawLab","Lab2","MainPage","Description","links","to","content","Container","Navbar","expand","Brand","href","Toggle","Collapse","id","Nav","map","Link","ThemedMenu","Layout","children","Header","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4f2e473.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"lab1_main__7avGT\",\"drawLab\":\"lab1_drawLab__2bLZu\",\"buttonContainer\":\"lab1_buttonContainer__uyrPu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Description\":\"MainPage_Description__1TRue\"};","const colors: Record<string, {\n    self:string\n    bg: string\n}> = {\n    '#fff': {\n        self: 'белая',\n        bg: 'белом'\n    },\n    '#000': {\n        self: 'чёрная',\n        bg: 'чёрном'\n    },\n};\n\ninterface IBackground {\n    getBackground(): string;\n}\n\nclass BlackBg implements IBackground {\n    public getBackground() {\n        return '#000';\n    }\n}\n\n\nclass WhiteBg implements IBackground {\n    public getBackground() {\n        return '#fff';\n    }\n}\n\n\nabstract class Caption {\n    abstract selfColor: string\n    getCaption (bgColor: string) {\n        return `Я ${colors[this.selfColor].self} обезьяна на ${colors[bgColor].bg} фоне`\n    };\n}\n\nclass BlackCaption extends Caption{\n    selfColor = '#000';\n}\nclass WhiteCaption extends Caption{\n    selfColor = '#fff';\n}\n\nabstract class Monkey {\n    protected abstract caption: Caption;\n    protected abstract bg: IBackground;\n\n    getBackground () {\n        return this.bg.getBackground();\n    };\n    getCaption () {\n        return this.caption.getCaption(this.bg.getBackground());\n    };\n    getColor() {\n        return this.caption.selfColor;\n    }\n}\n\nexport class WhiteMonkey extends Monkey {\n    protected caption = new WhiteCaption();\n    protected bg = new BlackBg();\n}\n\nexport class BlackMonkey extends Monkey {\n    protected caption = new BlackCaption();\n    protected bg = new WhiteBg();\n}\n\nexport function getMonkey(isWhiteColor: boolean) {\n    const monkey = isWhiteColor ? new WhiteMonkey() : new BlackMonkey();\n\n    return {\n        background: monkey.getBackground(),\n        caption: monkey.getCaption(),\n        color: monkey.getColor()\n    }\n}","import { useState } from 'react';\nimport styles from './index.module.css'\nimport { Button } from 'react-bootstrap';\nimport { getMonkey, WhiteMonkey } from './fabrics';\n\nconst WHITE = true;\n\nexport default function Lab1 () {\n    const [fabricType, setFabricType] = useState<boolean | undefined>(WHITE);\n\n    return <div className={styles.main}>\n        <h2>Лабораторная работа 1</h2>\n        <p>\n            Паттерн \"Абстрактная фабрика\" можно применять для парсинга параметров url и подставлять нужный контекст (React.Context) в реактивный компонент, или например делать разное меню или картинки разного размера в зависимости от устройства, но это слишком долго.\n            <br/>\n            Так как у меня кризис идей - буду описывать белую / черную обезьяну. <br/>\n            По нажатию кнопки она будет говорить о своём цвете и цвете фона.\n        </p>\n        <h3>Пояснения к коду</h3>\n        <p>\n            По нажатию кнопки применяется другая фабрика. <br/>\n            Наследник Monkey имеет экземпляры Caption и IBackground, жёстко прописанные в нём. <br/>\n            <code>abstract class</code> - это функция, вызываемая наследником как <code>this.prototype.call(this)</code>. Абстрактные свойства при этом существуют только при анализе типов <code>typescrypt</code>, при выполнении подставляясь из экземпляра наследника. <br/>\n            Т.о. <code>monkey.getBackground = (monkey as WhiteMonkey).(caption as WhiteCaption).prototype.getCaption</code>. При этом свойство <code>selfColor</code> берется из <code>monkey.caption as WhiteCaption</code>\n        </p>\n        <p>\n            Я отделил логику в файл <code>./fabrics.ts</code>. Функция <code>getMonkey</code> делает экземпляр <code>Monkey</code> и передает обратно его свойства. <br/>\n            <br/>\n            Я не стал описывать отрисовку обезьяны в фабриках, чтобы не смешивать представление здесь и логиу там. Но в принципе, можно было бы отрисовывать (например) картинку животного одним классом, а контейнер (его вид и цвет) - другим.\n        </p>\n        <h6>Об особенностях JS</h6>\n        <p>\n            <code>WhiteMonkey</code> использует методы <code>Monkey</code> через <code>WhiteMonkey.prototype = Monkey</code> (прототипное наследование). Это легко увидеть, если поменять <code>WhiteMonkey.prototype</code> на <code>BlackMonkey</code>. Тогда поведение будет противоположно.\n        </p>\n        <h3>Вывод</h3>\n        <p>\n            Сам паттерн отдельно я не использовал и использовать не собираюсь. Это основа для других паттернов - в т.ч. для фабричного метода и одиночки.\n        </p>\n        <p>\n            Вариация развития данного паттерна - передача Caption и Background в Monkey - что позволяет говорить о композиции - более гибком подходе. В таком виде я использовал его в работе.\n        </p>\n\n        <div className={styles.buttonContainer}>\n            <Button onClick={toggleFabricType}>Рисовать обезьяну!</Button>\n        </div>\n        {drawMonkey(fabricType)}\n    </div>;\n\n    function toggleFabricType() {\n        setFabricType(!fabricType);\n    }\n}\n\n\nfunction drawMonkey(isWhiteColor?: boolean) {\n    const { background, caption, color } = getMonkey(!!isWhiteColor);\n\n    return <div style={{ background, color }} className={styles.drawLab}>\n        {caption}\n    </div>\n}","\n\nexport default function Lab2() {\n    return null;\n}","import React from 'react';\nimport styles from './index.module.css'\n\nconst MainPage = () => <div className={styles.Description}>\n    <p>\n        Лабы разложены по меню. Всё делалось в соответствие с описанием из книги \"Приемы объектно-ориентированного\n        проектирования. Паттерны проектирования (2016)\", Авторы: Эрих Гамма, Ричард Хелм, Ральф Джонсон, Джон Влиссидес.\n    </p>\n    <p>\n        Навигация по меню.\n    </p>\n    <p>\n        Подробно смотреть лабу можно в IDE Phpstorm или бесплатной - VSCode\n    </p>\n    <p>\n        Скачать лабу для просмотра можно командой\n    </p>\n    <p>\n        <code>\n            git clone https://github.com/4t4nner/ss-architecture.git\n        </code>\n    </p>\n\n</div>;\nexport default MainPage;","import { Container, Nav, Navbar } from 'react-bootstrap';\nimport React from 'react';\n\ninterface MenuItem {\n    to: string\n    content: string\n}\n\nconst links = [\n    {\n        to: '/lab1',\n        content: 'Лабораторная работа 1'\n    }\n] as MenuItem[];\n\nexport default () => <div className='bg-light'>\n    <Container>\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"/\">Главная</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"me-auto\">\n                    {links.map(({ to, content }) => <Nav.Link href={to}>{content}</Nav.Link>)}\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    </Container>\n</div>","import { Navbar } from 'react-bootstrap';\nimport React from 'react';\nimport ThemedMenu from './MainMenu/ThemedMenu';\n\nexport default function() {\n    return <ThemedMenu />\n}","import React from 'react';\nimport Header from './Header';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Layout: React.FC = ({children}) => <>\n    <Header />\n    {children}\n</>\nexport default Layout;\n","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Lab1 from './labs/lab1';\nimport Lab2 from './labs/lab2';\nimport MainPage from './components/MainPage/index';\nimport Header from './components/Header';\nimport Layout from './components/Layout';\n\nconst App = () => <BrowserRouter>\n    <Layout>\n        <Routes>\n            <Route path=\"/\" element={<MainPage/>} />\n            <Route path=\"/lab1\" element={<Lab1/>}/>\n            <Route path=\"/lab2\" element={<Lab2/>}/>\n        </Routes>\n    </Layout>\n\n</BrowserRouter>\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}