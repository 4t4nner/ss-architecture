import React from 'react';

const texts = {
    purpose: () => <div>
        <h6>Назначение</h6>
        <p>
            Определяет интерфейс для создания объекта, но оставляет подклассам реше ние о том, какой класс инстанцировать. Фабричный метод позволяет классу делегировать инстанцирование подклассам.
        </p>
        <h6>Применимость</h6>
        <p>
            классу заранее неизвестно, объекты каких классов ему нужно создавать;
        </p>
        <p>
            класс спроектирован так, чтобы объекты, которые он создает, специфицировались подклассами;
        </p>
        <p>
            класс делегирует свои обязанности одному из нескольких вспомогательных подклассов, и вы планируете локализовать знание о том, какой класс принимает эти обязанности на себя.
        </p>
        <p>
            Можно применить паттерн для специфичного роутинга с заранее неопределенным типом страницы из нескольких. <br/>
            Класс фабрики из пути понимает понимает каким подклассом обрабатывать страницу. <br/>
            Например есть класс Lab2. у него есть метод render который отображает
        </p>
    </div>,
    description: () => <div>
        <p>
            В файле <code>method.tsx</code> содержится реализация параметризованного фабричного метода.
            На вход конструктора класса <code>LabPart</code> подается часть пути страницы, по которой выбирается подкласс в классе Creator. Подкласс Creator может расширить базовый класс - например, если нельзя до/переписать в базовый класс, можно использовать  его как в <code>CreatorWithConclusion</code>
        </p>
    </div>,
    conclusion: () => <div>

    </div>
}
export default texts;