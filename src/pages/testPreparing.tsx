import { Container } from 'react-bootstrap';

const TestPreparing = () => <Container>
    <h2>Подготовка к экзамену, список экзаменационных вопросов</h2>
    <h6>21. Назовите пример антипаттерна</h6>
    <p><b>Инверсия абстракции</b></p>
    <p>Битрикс - во все поля - пример с подменой класса.</p>
    <p>Битрикс - одиночество</p>
    <p>Битрикс - божественный объект</p>
    <p>Битрикс - один большой антипаттерн лол</p>

    <h6>1.	Что такое объект в ООП?</h6>
    <p>
        Объект в ООП — это сущность, способная сохранять свое состояние (информацию) и обеспечивающая набор операций (поведение) для проверки и изменения этого состояния.
    </p>

    <h6>2.	Возможно ли программирование без проектирования?</h6>
    <p>
        Возможно. Именно поэтому народ пилит микросервисы. Проектирование и увязываение всего этого делают девопс со товарищи.
    </p>

    <h6>3.	Что такое паттерн ООП?</h6>
    <p>

    </p>

    <h6>4.	Как возникла идея выделения паттернов ООП?</h6>
    <p>

    </p>

    <h6>5.	Классификация паттернов ООП</h6>
    <p>

    </p>

    <h6>6.	Чем отличаются простая фабрика (фабричный метод, Factory Method) и абстрактная фабрика (Abstract Factory)?</h6>
    <p>

    </p>

    <h6>7.	В каких случаях имеет смысл применять паттерн Строитель (Builder)?</h6>
    <p>

    </p>

    <h6>8.	Возможно ли создать порождающий паттерн без создания требуемых результирующих объектов?</h6>
    <p>

    </p>

    <h6>9.	Всегда ли нужно вручную писать код для применения паттерна Прототип (Prototype)?</h6>
    <p>

    </p>

    <h6>10.	В каких случаях может пригодиться паттерн Одиночка (Singleton)?</h6>
    <p>
        +
    </p>

    <h6>11.	Какие функции выполняют структурные паттерны?</h6>
    <p>

    </p>

    <h6>12.	Какие преимущества содержит использование паттерна Мост (Bridge)?</h6>
    <p>

    </p>

    <h6>13.	Что позволяет сделать Декоратор (Decorator)?</h6>
    <p>

    </p>

    <h6>14.	Чем отличаются Адаптер (Adapter) и Фасад (Facade)?</h6>
    <p>

    </p>

    <h6>15.	В каких случаях можно применить паттерн Компоновщик (Compositor)?</h6>
    <p>

    </p>

    <h6>16.	Какие функции выполняет паттерн Приспособленец (Flyweight)?</h6>
    <p>

    </p>

    <h6>17.	Чем отличается паттерн Заместитель (Proxy) от паттерна Адаптер (Adapter)?</h6>
    <p>

    </p>

    <h6>18.	Зачем нужен паттерн Итератор (Iterator)?</h6>
    <p>

    </p>

    <h6>19.	В каких случаях обычно используются паттерны ООП, а в каких -- нет?</h6>
    <p>
        +
    </p>

    <h6>20.	В каких случаях стоит использовать паттерн Команда (Command)?</h6>
    <p>

    </p>

    <h6>22.	Зачем нужен Интерпретатор (Interpreter)?</h6>
    <p>

    </p>

    <h6>23.	Что такое рефакторинг?</h6>
    <p>
        +
    </p>


</Container>;

export default TestPreparing;
